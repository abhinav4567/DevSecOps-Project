pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'nodejs16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/abhinav4567/DevSecOps-Project.git'
            }
        }
        stage('SonarQube') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectKey=Netflix \
                    -Dsonar.projectName=Netflix
                    '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: true, credentialsId: 'SonarQube'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm config set fund false --location=global"
                sh "npm i --package-lock-only"
                sh "npm audit fix"
                sh "npm install"
            }
        }
        stage('OWASP FS check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Trivy FS check') {
            steps {
                sh "trivy fs . > trivyfs.txt" 
            }
        }
        stage('Docker build and push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'DockerHub', url: 'https://index.docker.io/v1/') { 
                        sh "docker build --build-arg TMDB_V3_API_KEY=1b0e9f1db0f4026cdfcfedba2d0b57d7 -t netflix ."
                        sh "docker tag netflix abhinavsha89/netflix:latest"
                        sh "docker push abhinavsha89/netflix:latest"
                    }
                }
            }
        }
        stage('Trivy image scan') {
            steps {
                sh "trivy image abhinavsha89/netflix:latest > trivyimage.txt"
            }
        }
        stage('Deploy to container') {
            steps {
                sh "docker run -d -p 8081:80 abhinavsha89/netflix:latest"
            }
        }
    }
}

    script {
        def jobStatus = currentBuild.result ?: 'SUCCESS'

        if (jobStatus == 'SUCCESS' || jobStatus == 'UNSTABLE' || jobStatus == 'FAILURE') {
        emailext (
        to: 'abhinavrhce@gmail.com',
        subject: "Jenkins Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) - ${jobStatus}",
        body: """
        <p>Build Status: ${jobStatus}</p>
        <p>Job: ${env.JOB_NAME}</p>
        <p>Build Number: ${env.BUILD_NUMBER}</p>
        <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
        """
    )
}
    }
