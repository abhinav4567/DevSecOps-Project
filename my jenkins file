pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'nodejs16'
    }
    environment {
        SCANNER_HOME =tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/abhinav4567/DevSecOps-Project.git'
            }
        }
        stage('SonarQube') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectKey=Netflix \
                    -Dsonar.projectName=Netflix
                    '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube'
                }
            }
        }
        stage('Install Dependencies') {  // Corrected stage block
            steps {
                sh "npm config set fund false --location=global"
                sh "npm i --package-lock-only"
                sh "npm audit fix"
                sh "npm install"
            }
        }
        stage('OWASP FS check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Trivy FS check') {
            steps {
                sh "trivy fs . > trivyfs.txt" 
            }
        }
        stage('docker build and push') {
            steps {
                scripts{
                withDockerRegistry(credentialsId: 'DockerHub' , , url: 'https://index.docker.io/v1/') { 
                sh "docker build --build-arg TMDB_V3_API_KEY=XXXXXXX -t netflix ."
                sh "docker tag netflix abhinav4567/netflix:latest"
                sh "docker push abhinav4567/netflix:lastest"
                }
            }
            
            }
        }
    }
}
